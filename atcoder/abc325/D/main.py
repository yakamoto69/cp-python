#!/usr/bin/env python3
import sys
import heapq

def solve(N: int, T: "List[int]", D: "List[int]"):
    A = list(zip(T, D))
    A.sort()
    t = 0
    i = 0
    ans = 0
    heap = []
    while i < N or len(heap) > 0:
        # print(f't={t}', file=sys.stderr)
        while i < N and t == A[i][0]:
            heapq.heappush(heap, A[i][0] + A[i][1])
            i += 1

        # 1ループ毎にtが増えるかqueが消費されるかする
        if len(heap) > 0 and heapq.heappop(heap) >= t:
            ans += 1
            t += 1
        elif i < N and not len(heap) > 0:
            t = A[i][0]

    print(ans)


# Generated by 2.14.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    T = [int()] * (N)  # type: "List[int]"
    D = [int()] * (N)  # type: "List[int]"
    for i in range(N):
        T[i] = int(next(tokens))
        D[i] = int(next(tokens))
    solve(N, T, D)

if __name__ == '__main__':
    main()
