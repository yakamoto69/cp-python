#!/usr/bin/env python3
import sys
from atcoder.modint import Modint, ModContext

MOD = 998244353  # type: int


class BinomialCoefficients:
    def __init__(self, N: int):
        self.F: list[Modint] = [None] * (N + 1)
        self.I: list[Modint] = [None] * (N + 1)
        self.F[0] = Modint(1)
        self.F[1] = Modint(1)
        for i in range(2, N + 1):
            self.F[i] = self.F[i - 1] * i

        self.I[N] = self.F[N].inv()
        for i in range(N - 1, -1, -1):
            self.I[i] = self.I[i + 1] * (i + 1)

    def __call__(self, n: int, k: int) -> Modint:
        if n < k:
            return Modint(0)
        return self.F[n] * self.I[k] * self.I[n - k]


def solve(N: int, M: int, A: "List[int]", B: "List[int]"):
    g = [[False for _ in range(2*N)] for _ in range(2*N)]
    for i in range(M):
        u, v = A[i] - 1, B[i] - 1
        g[u][v] = True

    with ModContext(MOD):
        comb = BinomialCoefficients(2 * N)

        dp = [[Modint(0) for r in range(2*N + 1)] for l in range(2*N + 1)]
        for i in range(2*N + 1):
            dp[i][i] += 1

        for len in range(2, 2*N + 1, 2):
            for l in range(2*N - len + 1):
                r = l + len
                # print(l, r, file=sys.stderr)
                for k in range(l + 1, r, 2):
                    if not g[l][k]:
                        continue

                    a = (k - (l + 1)) // 2 + 1
                    b = (r - (k + 1)) // 2
                    # print("l r k", l, r, k, a, b, file=sys.stderr)
                    # print("dp", dp[l + 1][k].val(), dp[k + 1][r].val(), comb(a + b, a).val(), file=sys.stderr)
                    dp[l][r] += dp[l + 1][k] * dp[k + 1][r] * comb(a + b, a)
        print(dp[0][2*N].val())

# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    M = int(next(tokens))  # type: int
    A = [int()] * (M)  # type: "List[int]"
    B = [int()] * (M)  # type: "List[int]"
    for i in range(M):
        A[i] = int(next(tokens))
        B[i] = int(next(tokens))
    solve(N, M, A, B)

if __name__ == '__main__':
    main()
