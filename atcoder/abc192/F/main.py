#!/usr/bin/env python3
import sys

def solve(N: int, X: int, A: "List[int]"):
    ans = int(1e18)
    dp = [[[-1] * (N + 1) for _ in range(N)] for _ in range(N + 1)]  # dp[i][mod][何個足した]
    for m in range(1, N + 1):
        for i in range(N + 1):
            for j in range(m):
                for k in range(m + 1):
                    dp[i][j][k] = -1
        dp[0][0][0] = 0
        for i in range(N):
            for j in range(m):
                for k in range(m + 1):
                    # print(i, j, k, file=sys.stderr)
                    if dp[i][j][k] == -1:
                        continue
                    if k < m:
                        dp[i + 1][(A[i] + j) % m][k + 1] = max(dp[i + 1][(A[i] + j) % m][k + 1], dp[i][j][k] + A[i])
                    dp[i + 1][j][k] = max(dp[i + 1][j][k], dp[i][j][k])
        # print(dp, file=sys.stderr)
        if dp[N][X % m][m] != -1:
            v = (X - dp[N][X % m][m]) // m
            ans = min(ans, v)

    print(ans)
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    X = int(next(tokens))  # type: int
    A = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, X, A)

if __name__ == '__main__':
    main()
