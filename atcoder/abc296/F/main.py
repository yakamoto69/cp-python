#!/usr/bin/env python3
import sys

YES = "Yes"  # type: str
NO = "No"  # type: str


def solve(N: int, A: "List[int]", B: "List[int]"):
    for i in range(N):
        A[i] -= 1
        B[i] -= 1

    ans = YES if solve2(N, A, B) else NO
    print(ans)
    return

def solve2(N: int, A: "List[int]", B: "List[int]"):
    A1 = A.copy()
    B1 = B.copy()
    A1.sort()
    B1.sort()
    if A1 != B1:
        return False

    A2 = set(A.copy())
    if len(A2) != len(A):
        return True

    Ib = [0] * N
    for i in range(N):
        Ib[B[i]] = i

    P = [Ib[A[i]] for i in range(N)]
    # print(f"P={P}", file=sys.stderr)

    visited = [False] * N
    cycles = []
    for i in range(N):
        if not visited[i]:
            cnt = 1
            cur = i
            visited[cur] = True
            while not visited[P[cur]]:
                cnt += 1
                cur = P[cur]
                visited[cur] = True

            cycles.append(cnt)

    evens = sum(map(lambda cycle: 1 if cycle % 2 == 0 else 0, cycles))
    # print(f"cycles = {cycles} evens = {evens}", file=sys.stderr)
    return evens % 2 == 0  # 偶cycleが偶数個


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    A = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    B = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, A, B)

if __name__ == '__main__':
    main()
