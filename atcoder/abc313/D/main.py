#!/usr/bin/env python3
import sys
from typing import List

sys.setrecursionlimit(10**5)

# Undirected Graph用。隣接リスト形式で(node_id, edge_id)が入っている
# 自己ループに対応してる(自己ループの場合、エッジが２本できる)
def pack_undirected_graph(N: int, M: int, s: List[int], t: List[int]) -> "List[List[(int, int)]]":
    p = [0] * N
    for e in range(M):
        p[s[e]] += 1
        p[t[e]] += 1
    g = [[(-1, -1)] * p[i] for i in range(N)]
    for e in range(M):
        u = s[e]
        v = t[e]
        g[u][p[u] - 1] = (v, e)
        p[u] -= 1
        g[v][p[v] - 1] = (u, e)
        p[v] -= 1
    return g

def query(xs: List[int]):
    print("? ", end="")
    print(*map(lambda x: x + 1, xs), flush=True)
    # print(f'? {" ".join(map(str, map(lambda x: x + 1, xs)))}', flush=True)
    return int(input())


def answer(ans: List[int]):
    print("! ", end="")
    print(*ans, flush=True)


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    N, K = map(int, input().split())
    if K == 1:
        ans = [-1] * N
        for i in range(N):
            ans[i] = query([i])
        answer(ans)
        return

    res = [-1] * N
    for i in range(N):
        x = [(i + j) % N for j in range(K)]
        res[i] = query(x)

    s = [-1] * (N - 1)
    t = [-1] * (N - 1)
    weight = [-1] * (N - 1)
    for i in range(N - 1):
        s[i] = i
        t[i] = (i + K) % N
        weight[i] = res[i] ^ res[i + 1]
    g = pack_undirected_graph(N, N - 1, s, t)
    ans = [-1] * N
    ans[0] = 0

    print(f'g:{g} weight:{weight}', file=sys.stderr)

    def dfs(u, par, c):
        if ans[u] != -1:
            return False

        # print(f'visit({u})', file=sys.stderr)
        ans[u] = c
        for v, e in g[u]:
            if v == par:
                continue
            dfs(v, u, c ^ weight[e])

        return True

    for u in range(N):
        if dfs(u, -1, 0):
            x = 0
            for i in range(K):
                x ^= ans[(u + i) % N]
            if x != res[u]:
                for i in range(N):
                    ans[i] ^= 1

    # print(f'ans:{ans}', file=sys.stderr)

    # print(f'ans:{ans}, x:{x}', file=sys.stderr)

    answer(ans)


if __name__ == '__main__':
    main()
