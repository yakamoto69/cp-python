import types

_atcoder_code = """
# Python port of AtCoder Library.

__version__ = '0.0.1'
"""

atcoder = types.ModuleType('atcoder')
exec(_atcoder_code, atcoder.__dict__)

_atcoder_dsu_code = """
import typing


class DSU:
    '''
    Implement (union by size) + (path halving)

    Reference:
    Zvi Galil and Giuseppe F. Italiano,
    Data structures and algorithms for disjoint set union problems
    '''

    def __init__(self, n: int = 0) -> None:
        self._n = n
        self.parent_or_size = [-1] * n

    def merge(self, a: int, b: int) -> int:
        assert 0 <= a < self._n
        assert 0 <= b < self._n

        x = self.leader(a)
        y = self.leader(b)

        if x == y:
            return x

        if -self.parent_or_size[x] < -self.parent_or_size[y]:
            x, y = y, x

        self.parent_or_size[x] += self.parent_or_size[y]
        self.parent_or_size[y] = x

        return x

    def same(self, a: int, b: int) -> bool:
        assert 0 <= a < self._n
        assert 0 <= b < self._n

        return self.leader(a) == self.leader(b)

    def leader(self, a: int) -> int:
        assert 0 <= a < self._n

        parent = self.parent_or_size[a]
        while parent >= 0:
            if self.parent_or_size[parent] < 0:
                return parent
            self.parent_or_size[a], a, parent = (
                self.parent_or_size[parent],
                self.parent_or_size[parent],
                self.parent_or_size[self.parent_or_size[parent]]
            )

        return a

    def size(self, a: int) -> int:
        assert 0 <= a < self._n

        return -self.parent_or_size[self.leader(a)]

    def groups(self) -> typing.List[typing.List[int]]:
        leader_buf = [self.leader(i) for i in range(self._n)]

        result: typing.List[typing.List[int]] = [[] for _ in range(self._n)]
        for i in range(self._n):
            result[leader_buf[i]].append(i)

        return list(filter(lambda r: r, result))
"""

atcoder.dsu = types.ModuleType('atcoder.dsu')
exec(_atcoder_dsu_code, atcoder.dsu.__dict__)
DSU = atcoder.dsu.DSU

#!/usr/bin/env python3
# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
import sys
# from atcoder.dsu import DSU

def main():
    N, Q = map(int, input().split())
    group_dsu = DSU(N + Q)  # group dsu
    ball_to_group = [i for i in range(N + Q)]   # ball to group
    to_box = [i for i in range(N + Q)]          # group to box
    to_group = [i for i in range(N + Q)]            # box to group
    cnt_group = N
    cnt_ball = N

    # i, jはgroup番号, toはbox
    def merge(gi: int, gj: int, to):
        par = group_dsu.merge(gi, gj)
        # print(f"bi:{bi} bj:{bj} par:{par}", file=sys.stderr)
        to_group[to] = par
        to_box[par] = to

    for _ in range(Q):
        query = list(map(int, input().split()))
        if query[0] == 1:
            box_x, box_y = query[1:]
            box_x -= 1
            box_y -= 1
            g_x, g_y = to_group[box_x], to_group[box_y]
            merge(g_x, g_y, box_x)

            # yに新しいグループを割り当てる
            to_group[box_y] = cnt_group
            to_box[cnt_group] = box_y

            cnt_group += 1

        elif query[0] == 2:
            box = query[1] - 1

            # ballをcnt_groupに属させる
            ball_to_group[cnt_ball] = cnt_group

            # いったん#cnt_groupのバーチャルboxに入れる
            to_box[cnt_group] = cnt_group
            to_group[cnt_group] = cnt_group

            merge(to_group[box], cnt_group, box)
            cnt_group += 1
            cnt_ball += 1
        else:
            ball = query[1] - 1
            box = to_box[group_dsu.leader(ball_to_group[ball])]
            print(box + 1)

        # print(f"ball_to_group:{ball_to_group} to_box:{to_box} to_group:{to_group}", file=sys.stderr)


if __name__ == '__main__':
    main()
