#!/usr/bin/env python3
import sys
from atcoder.modint import ModContext, Modint

MOD = 998244353  # type: int


def print_modint_list(modint_list: "List[Modint]", file):
    print([x.val() for x in modint_list], file=file)


def solve(N: int, X: int, T: "List[int]"):
    with ModContext(998244353):
        dp = [Modint(0) for _ in range(20010)]
        dp[0] = Modint(1)

        div_n = Modint(N).inv()

        # print(f'div_n: {div_n.val()}', file=sys.stderr)

        ans = Modint(0)
        for i in range(X + 1):
            for j in range(N):
                v = dp[i] * div_n
                dp[i + T[j]] += v
                if j == 0 and i + T[j] > X:
                    # print(f'={(dp[i] * div_n).val()}', file=sys.stderr)
                    ans += v

        # print_modint_list(dp[0:(X + 1)], file=sys.stderr)
        print(ans.val())

    return


# Generated by 2.14.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    X = int(next(tokens))  # type: int
    T = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, X, T)

if __name__ == '__main__':
    main()
