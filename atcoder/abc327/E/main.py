#!/usr/bin/env python3
import math
import sys

def solve(N: int, P: "List[int]"):
    inf = -1e9
    dp = [inf] * (N + 10)  # 分子の値のみが入っている
    dp[0] = 0.0

    pow = [0.0] * (N + 10)
    pow[0] = 1

    for i in range(N):
        pow[i + 1] = pow[i] * 0.9

    for i in range(N - 1, -1, -1):
        for k in range(N, 0, -1):
            if dp[k - 1] == inf:
                continue

            v = dp[k - 1] + P[i] * pow[k - 1]
            dp[k] = max(dp[k], v)
            # print(f'dp[{k}]={dp[k]} i={i} k={k} v={v}', file=sys.stderr)

    ans = inf
    divider = 0.0
    weight = 1.0
    for k in range(1, N + 1):
        divider = divider + weight
        r = dp[k] / divider - (1200 / math.sqrt(k))
        weight = weight * 0.9

        ans = max(ans, r)

    print(f'{ans: .15f}')
    return


# Generated by 2.14.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    N = int(input())
    P = list(map(int, input().split(' ')))
    solve(N, P)

if __name__ == '__main__':
    main()
