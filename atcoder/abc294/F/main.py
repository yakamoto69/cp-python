#!/usr/bin/env python3
import sys
from bisect import bisect_left


def solve(N: int, M: int, K: int, A: "List[int]", B: "List[int]", C: "List[int]", D: "List[int]"):
    inf = 1e20
    def alpha(a: int, b: int, x: float):
        return (x * (a + b) - a) / (1 - x) if x < 1 else inf

    def count(x: float):
        E1 = list(map(lambda i: alpha(A[i], B[i], x), range(N)))
        E2 = list(map(lambda i: alpha(C[i], D[i], x), range(M)))
        E2.sort()
        cnt = 0
        for e in E1:
            cnt += bisect_left(E2, -e)
        # print(E1, E2, file=sys.stderr)
        # print(x, cnt, file=sys.stderr)
        return cnt

    def judge(x: float):
        return count(x) >= K

    x = binary_search_monotonic(judge, 0, 1, True)
    print(f'{x*100:.15f}')
    return


def binary_search_monotonic(func, low, high, decr=False, times=100):
    for t in range(times):
        mid = (low + high) / 2

        if func(mid) ^ decr:
            high = mid
        else:
            low = mid

    return (low + high) / 2

# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    M = int(next(tokens))  # type: int
    K = int(next(tokens))  # type: int
    A = [int()] * (N)  # type: "List[int]"
    B = [int()] * (N)  # type: "List[int]"
    for i in range(N):
        A[i] = int(next(tokens))
        B[i] = int(next(tokens))
    C = [int()] * (M)  # type: "List[int]"
    D = [int()] * (M)  # type: "List[int]"
    for i in range(M):
        C[i] = int(next(tokens))
        D[i] = int(next(tokens))
    solve(N, M, K, A, B, C, D)

if __name__ == '__main__':
    main()
