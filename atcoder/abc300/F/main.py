#!/usr/bin/env python3
import sys


def solve(N: int, M: int, K: int, S: str):
    cntX = 0
    posX = []
    for i in range(N):
        if S[i] == 'x':
            cntX += 1
            posX.append(i)
    l = 0   # 何個xを飛ばすか
    m = K // cntX   # lとrが存在するSのindexの差
    r = K % cntX    # xのpos

    def il():
        return 0 if l == 0 else (posX[l - 1] + 1)

    def len():
        # print(f"m:{m} l:{l} r:{r}", file=sys.stderr)
        return min(N * M, posX[r] + m * N) - il()

    ans = len()    # l=0 は Tの最初からxを全部変えて行ったとき
    # print(f"m:{m} r:{r} cntX:{cntX} posX:{posX}", file=sys.stderr)
    while l < cntX:
        l += 1
        r += 1
        if r == cntX:
            r = 0
            m += 1
        ans = max(ans, len())

    print(ans)
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    M = int(next(tokens))  # type: int
    K = int(next(tokens))  # type: int
    S = next(tokens)  # type: str
    solve(N, M, K, S)

if __name__ == '__main__':
    main()
