#!/usr/bin/env python3
import sys


def solve(A: "List[List[int]]"):
    need = 0
    for i in range(16):
        c = i % 4
        h = i // 4
        if A[h][c] == 1:
            need = need | (1 << i)

    print(bin(need), file=sys.stderr)

    ans = 0
    for bit in range(1 << 16):
        if need & bit != need:
            continue

        # print(bin(bit), file=sys.stderr)

        lsb = (bit & -bit)
        que = [lsb.bit_length() - 1]
        visit = 0
        while len(que):
            u = que.pop()
            if visit >> u and 1 == 1:
                continue
            visit |= (1 << u)

            left = u - 1
            li = u % 4 - 1
            right = u + 1
            ri = u % 4 + 1
            up = u - 4
            down = u + 4
            if li >= 0 and (visit >> left & 1 == 0) and (bit >> left & 1 == 1):
                que.append(left)
            if ri < 4 and (visit >> right & 1 == 0) and (bit >> right & 1 == 1):
                que.append(right)
            if up >= 0 and (visit >> up & 1 == 0) and (bit >> up & 1 == 1):
                que.append(up)
            if down < 16 and (visit >> down & 1 == 0) and (bit >> down & 1 == 1):
                que.append(down)

        if visit == bit:
            ans += 1

    print(ans)
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    A = [[int(next(tokens)) for _ in range(4)] for _ in range(4)]  # type: "List[List[int]]"
    solve(A)

if __name__ == '__main__':
    main()
